#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Feb  3 18:49:12 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
# set env(https_proxy) <set proxy here, if necessary, and uncomment>
spawn /usr/bin/python3 /usr/bin/ister_gui.py --exit-after
match_max 100000
expect -re ".*Clear Linux OS for Intel Architecture Installer.*"
send -- "\r"
send -- "\t"
expect -re ".*Network Requirements.*"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\r"
expect -re ".*Choose Action.*"
send -- "\r"
# check < previous > button functionality
expect -re ".*Stability Enhancement Program.*"
send -- "\t"
send -- "\t"
send -- "\r"
send -- "\r"
expect -re ".*Stability Enhancement Program.*"
send -- "\t"
send -- "\r"
send -- "\r"
expect -re ".*Choose Installation Type.*"
# tab to manual
send -- "\t"
send -- "\r"
expect -re ".*Choose partitioning method.*"
# use default - not doing cgdisk testing with expect
send -- "\r"
expect -re ".*Choose target device.*"
send -- "\r"
expect -re ".*Warning.*"
# tab to Yes
send -- "\t"
send -- "\r"
expect -re ".*Configuring Hostname.*"
# accept default
send -- "\r"
# Next
send -- "\r"
expect -re ".*User configuration.*"
# manually create a user
send -- "\r"
send -- "User\r"
send -- "Name\r"
# Username is now uname
send -- "\t"
send -- "UserPass\r"
send -- "UserPass\r"
# Add user to sudoers
send -- "\r"
send -- "\t"
send -- "\r"
expect -re ".*Bundle selector.*"
# editors
send -- "\r"
# tab to Next
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
# Next
send -- "\r"
expect -re ".*Network configuration.*"
send -- "\t"
# Static IP configuration
send -- "\r"
expect -re ".*Step 11 of 12.*"
# tab through options, don't actually set anything
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
send -- "\t"
# Previous
send -- "\r"
expect -re ".*Step 11 of 12.*"
send -- "\t"
send -- "\t"
# Use DHCP
send -- "\r"
expect -re ".*Attention.*"
send -- "\t"
# Yes
send -- "\r"
expect -re ".*Ok.*"
send -- "\r"
expect -re ".*will be rebooted.*"
send -- "\r"
expect eof
